%
%
\section{Երկկապ ցուցակ}
\label{sec:doubly}

Կապակցված ցուցակների երկրորդ կարևոր ներկայացուցիչը 
\emph{երկկապ} (\emph{doubly linked}) ցուցակն է։ Սա նույնպես 
տվյալների գծային հաջորդականություն է, որում շղթա են կազմում 
\emph{երկկապ} հանգույցները։ Ի տարբերություն միակապ հանգույցի, 
երկկապ հանգույցն ունի ցուցիչներ՝ իրեն նախորդող և հաջորդող 
հանգույցներին կապվելու համար։ Սովորաբար նախորդող հանգույցին 
կապող ցուցիչն անվանում են \(previous\), իսկ հաջորդող 
հանգույցինը՝ \(next\):

\begin{figure}[h]
\centering
\includegraphics{struc-fig-11.eps}
\end{figure}

Երբ երկկապ հանգույցներն իրար կապվելով ցուցակ են կազմում, 
դրանցից ամենաառաջինի \(previous\) և ամենավերջինի \(next\) 
ցուցիչները ստանում են \(\boxslash\) արժեքը։ Ցուցակի առաջին
հանգույցը կոչվում է \emph{գլուխ} -- \(head\), իսկ վերջինը՝ 
\emph{պոչ} -- \(tail\)։ 

\begin{figure}[h]
\centering
\includegraphics{struc-fig-12.eps}
\end{figure}

\(tail\) ցուցիչը հնարավորություն է տալիս երկկապ ցուցակի 
հետ կատարվող որոշ գործողություններ, ինչպիսիք են, օրինակ, 
ցուցակի վերջից տարր ավելացնել/հեռացնելը, \(O(n)\)֊ից դարձնել
\(O(1)\) բարդության։

%
%
\subsection{\texttt{DoublyLinkedList} դասը}

Երկկապ ցուցակն իրականացնում եմ ստորև ուրվագծված 
\texttt{DoublyLinkedList} ընդհանրացված դասով (\texttt{E} 
տիպի պարամետրով)։ Որպես գործողություններ նախատեսել եմ
ցուցակի սկզբում և վերջում տարր ավելացնելն ու հեռացնելը,
բոլոր տրված արժեքները հեռացնելը, ցուցակի շրջելը և 
ցուցակի տարրերով անցումը։ Այս վերջին գործողության համար 
\texttt{DoublyLinkedList} դասն իրականացնում է \texttt{Iterable}
ինտերֆեյսը, որը հնարավորություն է տալիս ցուցակի տարրերը 
թվարկել \textit{for-each} տիպի ցիկլի օգնությամբ։

<<DoublyLinkedList դասը>>=
package structures;
import java.util.Iterator;
import java.lang.Iterable;
public class DoublyLinkedList<E> 
    implements Iterable<E> {
  <<Երկկապ ցուցակի հանգույցը>>
  <<Ցուցակի սկիզբն ու վերջը>>
  <<Ցուցակի երկարությունը>>
  <<Դատա՞րկ է արդյոք ցուցակը>>
  <<Տարրն ավելացնել սկզբից>>
  <<Տարրն ավելացնել վերջից>>
  <<Հեռացնել առաջին տարրը>>
  <<Հեռացնել վերջին տարրը>>
  <<Հեռացնել տրված արժեքները>>
  <<Հեռացնել նշված հանգույցը>>
  <<Որոնել տրված արժեքը>>
  <<Շրջել ցուցակը>>
  <<Իտերատորի իրականացումը>>
}
@ 


%
%
\paragraph{Երկկապ ցուցակի հանգույցը:}
Այս բաժնի սկզբում արդեն նշեցի, թե ինչ կառուցվածք ունի
\emph{երկկապ հանգույցը}․ երեք պարտադիր դաշտեր են, որոնցից
\texttt{data}֊ն տվյալների համար է և ծառայում է որպես 
բնութագրիչ՝ \emph{բանալի}, \texttt{prevoius} ցուցիչը
նախորդ հանգույցի կապն է, և \texttt{next} ցուցիչն էլ 
հաջորդ հանգույցի կապն է։ \texttt{Node} ներդրված դասը
սահմանել եմ հետևյալ կերպ․
<<Երկկապ ցուցակի հանգույցը>>=
private class Node {
  public E data = null;
  public Node previous = null;
  public Node next = null;

  public Node(E d)
  { data = d; }
} 
@

%
\paragraph{Հղումներ ցուցակի սկզբին ու վերջին:}
Ցուցակի սկիզբն ու վերջը (գլուխն ու պոչը) որոշվում են
համապատասխանաբար \texttt{head} և \texttt{tail} ցուցիչներով։ 
Երբ ցուցակը դատարկ է, սրանց երկուսի արժեքն էլ \(\boxslash\) է։
<<Ցուցակի սկիզբն ու վերջը>>=
private Node head = null;
private Node tail = null;
@

%
\paragraph{Ցուցակի երկարությունը։}
Ցուցակի տարրերի քանակը պահվուն է \texttt{count} հաշվիչում։
Նոր հանգույց ավելացնելիս հաշվիչն աճում է, իսկ հեռացնելիս՝
պակասում։ Սա հնարավորություն է տալիս ցուցակի երկարությունը
ստանալ՝ առանց \texttt{head}֊ից \texttt{tail} անցնելու և 
հանգույցները հաշվելու։ 
<<Ցուցակի երկարությունը>>=
private int count = 0;
@
Այս հաշվիչի արժեքը որպես ցուցակի երկարություն վերադարձնում
է \texttt{length()} մեթոդը։
<<Ցուցակի երկարությունը>>=
public int length()
{
  return count;
}
@ 

%
\paragraph{Ցուցակի դատարկ լինելը։}
Կարելի է դուրս բերել երկու պայմաններից․ 
\(head\equiv\boxslash\wedge tail\equiv\boxslash\) կամ
\(count=0\)։ Երկրորդն ավելի պարզ է, թող որ դա լինի․
<<Դատա՞րկ է արդյոք ցուցակը>>=
public boolean isEmpty()
{
  return 0 == count;
}
@

%
\paragraph{Տարրն ավելացնել սկզբից և վերջից։}
Եթե ցուցակը դատարկ է, ապա նոր ստեղծված հանգույցը դառնում 
է առաջինն ու միակը։ Եթե ցուցակը դատարկ չէ, ապա նոր ստեղծված
հանգույցը պետք է դառնա կամ ամենաառաջինը, կամ էլ՝ ամենավերջինը։

Երբ նոր հանգույցը պետք է ավելացնել ցուցակի սկզբից, ապա
պետք է նրա \texttt{next} ցուցիչը կապել \texttt{head}֊ին, 
հետո \texttt{head}֊ի \texttt{previous}֊ը կապել այս նոր 
հանգույցին, և վերջում նոր հանգույցը դարձնել առաջին հանգույց՝ 
\texttt{head}֊ը տեղափոխելով դրա վրա։
\begin{figure}[h]
\centering
\includegraphics{struc-fig-13.eps}
\end{figure}
Նկարի ձախ կողմում պատկերված է \texttt{nno} նոր ստեղծված 
հանգույցը, բայց այն դեռ կապված չէ ցուցակին։ Աջ կողմում 
արդեն ցույց  տրված, թե ինպես է նոր ստեղծված հանգույցը
դարձել ցուցակի առաջին հանգույց։
<<Տարրն ավելացնել սկզբից>>=
public void addFront(E e)
{
  Node nno = new Node(e);
  if( isEmpty() ) {
    head = nno;
    tail = nno;
  }
  else {
    nno.next = head;
    head.previous = nno;
    head = nno;
  }
  ++count;
}
@
Նմանատիպ քայլեր են կատարվում ցուցակի վերջում նոր հանգույց 
ավելացնելու ժամանակ։ \texttt{tail}֊ի \texttt{next}֊ը կապվում 
է նոր հանգույցին, հետո նոր հանգույցի \texttt{previous}֊ը 
կապվում է \texttt{tail}֊ին, և վերջում էլ \texttt{tail} ցուցիչը 
տեղափոխվում է նոր ստեղծված հանգույցի վրա։
\begin{figure}[h]
\centering
\includegraphics{struc-fig-14.eps}
\end{figure}
<<Տարրն ավելացնել վերջից>>=
public void addBack(E e)
{
  Node nno = new Node(e);
  if( isEmpty() ) {
    head = nno;
    tail = nno;
  }
  else {
    tail.next = nno;
    nno.previous = tail;
    tail = nno;
  }
  ++count;
}
@

%
\paragraph{Հեռացնել նշված հանգույցը։}
Ցուցակի առաջին կամ վերջին հանգույցը հեռացնելու, ինչպես նաև
տրված արժեքով հանգույցները հեռացնելու գործողություններն
իրականացնելու համար նախատեսել եմ \texttt{removeNode()} 
օժանդակ մեթոդը։ Այն հեռացնում է տրված \texttt{p} հղումով 
հանգույցը և, անհրաժեշտության դեպքում, ճշգրտում է 
\texttt{head}֊ն ու \texttt{tail}֊ը։
\begin{figure}[h]
\centering
\includegraphics{struc-fig-15.eps}
\end{figure}
<<Հեռացնել նշված հանգույցը>>=
private void removeNode(Node p)
{
  <<Եթե հաջորդող ունի>>
  <<Եթե նախորդող ունի>>
  <<Ճշգրտել head֊ը և tail֊ը>>
  --count;
}
@
Եթե հեռացվող հանգույցը վերջինը չէ (հաջորդող ունի), ապա
պետք է այդ հաջորդողը կապել հեռացվողի նախորդ հանգույցին։
<<Եթե հաջորդող ունի>>=
if( p.next != null )
  p.next.previous = p.previous;
@
Եթե հեռացվող հանգույցը առաջինը չէ (նախորդող ունի), ապա
պետք է այդ նախորդողը կապել հեռացվողի հաջորդ հանգույցին։
<<Եթե նախորդող ունի>>=
if( p.previous != null )
  p.previous.next = p.next;
@
Եթե հեռացվողը առաջին հանգույցն էր, ապա \texttt{head}֊ը
տեղափոխել իր հաջորդի վրա։ Իսկ եթե հեռացվողը վերջին 
հանգույցն էր, ապա \texttt{tail}֊ը տեղափոխել իր նախորդի 
վրա։
<<Ճշգրտել head֊ը և tail֊ը>>=
if( p == head )
  head = head.next;
if( p == tail )
  tail = tail.previous;
@

%
%
\paragraph{Հեռացնել առաջին կամ վերջին հանգույցը։}
<<Հեռացնել առաջին տարրը>>=
public E removeFront()
{
  if( isEmpty() )
    return null;

  E res = head.data;
  removeNode(head);
  return res;
}
@
Ճիշտ նույնպիսի քայլեր են կատարվում ցուցակի վերջին հանգույցը
հեռացնելու համար։
<<Հեռացնել վերջին տարրը>>=
public E removeBack()
{
  if( isEmpty() )
    return null;

  E res = tail.data;
  removeNode(tail);
  return res;
}
@


%
%
\paragraph{Տրված արժեքի որոնելը։}
Ցուցակում մի որևէ արժեքի առկայությունը որոշելու համար նորից 
օգտագործում եմ գծային որոնումը, բայց այս անգամ օգտագործելու 
եմ Վիրտի առաջարկած պատնեշի հնարքը։ Դրա համար, որոնումը 
սկսելուց առաջ, ցուցակի պոչից կցում եմ մի նոր հանգույց՝ որոնելի 
\texttt{e} արժեքով։  
<<Որոնել տրված արժեքը>>=
public boolean contains(E e)
{
  if( isEmpty() )
    return false;

  Node seninel = new Node(e);
  tail.next = sentinel;

  Node p = head;
  while( !e.equals(p.data) )
    p = p.next;
  tail.next = null;

  return p != sentinel;
}
@

%
%
\paragraph{Հեռացնել տրված արժեքով բոլոր հանգույցները։}
<<Հեռացնել տրված արժեքները>>=
public void removeAll(E e)
{
  Node p = head;
  while( p != null ) {
    if( e.equals(p.data) )
      removeNode(p);
    p = p.next;
  }    
}
@

%
%
\paragraph{Ցուցակի շրջելը։}
Ակնհայտ է, որ երկկապ ցուցակը շրջելու համար պետք է 
պարզապես տեղերով փոխել \texttt{head} և \texttt{tail}
ցուիչները։
<<Շրջել ցուցակը>>=
public void reverse()
{
  Node temp = head;
  head = tail;
  tail = temp;
}
@

%
%
\paragraph{Հանգույցներով անցնող իտերատորը։}
<<Իտերատորի իրականացումը>>=
public Iterator<E> iterator()
{
  return new DoublyIterator();
}

private class DoublyIterator
    implements Iterator<E> {
  private Node cursor = head;
  public boolean hasNext()
  {
    return cursor != null;
  }
  public E next()
  {
    E res = cursor.data;
    cursor = cursor.next;
    return res;
  }
}
@


%
%
\subsection{Երկկապ ցուցակի կիրառություններ}

--հերթ--

