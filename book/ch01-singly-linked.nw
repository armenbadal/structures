
%
%
\section{Միակապ ցուցակ}
\label{sec:singly}

\emph{Միակապ ցուցակը} հանգույցների շղթա է, որտեղ ամեն մի 
հանգույցը պարունակում է երկու պարտադիր դաշտ։ Մեկը տվյալ 
հանգույցը բնութագրող \emph{տվյալների} դաշտն է՝ (\emph{data}), 
որը երբեմն անվանում են նաև հանգույցի \emph{բանալի} 
(\emph{key})՝ ընդգծելով նրա բնութագրիչ դերը հանգույցի համար։ 
Մյուսը նույնանման հանգույցի \emph{ցուցիչն} է՝ (\emph{next}), 
որի օգնությամբ կապ է ստեղծում ցուցակի երկու տարրերի միջև։ 
Միակապ հանգույցը սովորաբար պատկերվում է երկու կեսերից 
բաղկացած ուղղանկյան տեսքով․

\begin{figure}[h]
\centering
\includegraphics{struc-fig-1.eps}
\end{figure}

Իսկ, օրինակ, \(a_0\), \(a_1\), \(a_2\) և \(a_3\) տարրերի
միակապ ցուցակն էլ պատկերվում է այսպիսի հանգույցների շղթայի 
տեսքով, որտեղ \emph{head}֊ը առաջին հանգույցի ցուցիչն է, իսկ 
\(\boxslash\) սիմվոլով նշված է \emph{զրոյական} («դատարկ») 
ցուցիչը։

\begin{figure}[h]
\centering
\includegraphics{struc-fig-2.eps}
\end{figure}

Այս նկարագրությունից պարզ է, որ միակապ ցուցակն ունի \emph{անդրադարձ} 
(ռեկուրսիվ) կառուցվածք և կարող է սահմանվել անդրադարձ եղանակով։ 
Միակապ ցուցակը կամ դատարկ է՝ \(head\rightarrow\boxslash\), կամ էլ 
միակապ հանգույց է, որի \emph{data} դաշտում իմաստալից ինֆորմացիան է, 
իսկ \emph{next} դաշտը նորից միակապ ցուցակի ցուցիչ է։ Ոչ դատարկ 
ցուցակում առաջին հանգույցն անվանում են \emph{գլուխ} (\emph{head}), 
իսկ առաջին հանգույցին հաջորդող ցուցակին՝ \emph{պոչ} (\emph{tail})։

\medskip
Ես պատրաստվում եմ միակապ ցուցակի հետ կատարվող գործողությունների 
իրականացումը ներկայացնել և՛ ռեկուրսիվ, և՛ իտերատիվ եղանակներով։
Երկու իրականացումներում էլ նույնն են թե՛ ներքին կառուցվածքը, թե՛
ինտերֆեյսը։ Եվ որպեսզի նվազագույնի հասցնեմ ծրագրային տեքստն ու 
դրան ուղեկցող նկարագրությունները, նախ՝ կնկարագրեմ 
\texttt{SinglyLinked} վերացական (abstract) դասը, ապա այն 
կկոնկրետացնեմ \texttt{SinlyLinkedRecursive} և
\texttt{SinglyLinkedIterative} դասերով։


%
%
\subsection{\texttt{SinglyLinked} վերացական դասը}

\texttt{SynglyLinked}-ը ընդհանրացված աբստրակտ դաս է՝ \texttt{E} 
տիպի պարամետրով։ Այն պարունակում է միակապ հանգույցի սահմանումը, 
ցուցակի առաջին հանգույցին կապված \texttt{head} հղումը և 
գործողությունները մոդելավորող մեթոդների հայտարարությունները։ 
Այն գործողությունները, որոնք նույնն են և՛ ռեկուրսիվ, և՛ իտերատիվ 
տարբերակներում, ես իրականացրել եմ այս դասում, մյուս 
գործողությունները հայտարաարել եմ որպես աբստրակտ մեթոդներ։
<<SinglyLinked դասը>>=
package structures;
import java.util.function.Consumer;
public abstract class SinglyLinked<E> {
    <<Միակապ հանգույցի սահմանումը>>
    <<Ցուցակի սկիզբը>>
    <<Ցուցակը դատա՞րկ է>>
    <<Տարր ավելացնել սկզբից>>
    <<Հեռացնել առաջին տարրը>>
    <<Աբստրակտ մեթոդներ>>
}
@ 

%
%
\paragraph{Միակապ ցուցակի հանգույցը։}
Ինչպես արդեն նշեցի վերևում, միակապ ցուցակի հանգույցը պարունակում 
է երկու պարտադիր դաշտ․ \texttt{data}՝ \emph{տվյալների} համար և 
\texttt{next}՝ ցուցակի պոչին \emph{հղվելու} համար։ Իրականացումը 
շատ պարզ է․
<<Միակապ հանգույցի սահմանումը>>=
protected class Node {
    public E data = null;
    public Node next = null;

    public Node(E e)
    {
        data = e;
    }
}
@ 
Արժե նշել, որ բացի նշված երկուսից, հանգույցը կարող է պարունակել 
այլ դաշտեր ևս։ Սակայն դաշտերից որևէ մեկը պետք է առանձնացվի որպես 
\emph{բանալի} (key)։ Տվյալ դեպքում բանալու դերը կատարում է հենց 
\texttt{data}֊ն։

%
%
\paragraph{Ցուցակի սկիզբը։}
Քանի որ բոլոր հանգույցները կապված են միմյանց, ապա միակապ ցուցակի 
հետ աշխատելու համար անհրաժեշտ է (թերևս, նաև՝ բավական է) ունենալ 
առաջին հանգույցի ցուցիչը։ \texttt{SinglyLinked} դասի \texttt{head} 
անդամը նախատեսված է հենց դրա համար․
<<Ցուցակի սկիզբը>>=
protected Node head = null;
@ 
Երբեմն, առաջին տարրի հղման հետ միասին, միակապ ցուցակում պահում 
են նաև հղում ցուցակի վերջին հանգույցին։ Դա հեշտացնում է որոշ 
գործողություններ (օրինակ, վերջին տարրի հեռացնելը), սակայն մեր 
այս օրինակում այդ երկրորդ ցուցիչը չենք օգտագործի։

@ Ցուցակի դատարկ լինելը ստուգելու համար պետք է պարզապես 
ստուգել, որ \texttt{head} ցուցչը հավասար լինի \texttt{null}֊ի։
<<Ցուցակը դատա՞րկ է>>=
public boolean empty()
{
    return head == null;
}
@ %def empty


%
%
\paragraph{Տարրի ավելացնելը ցուցակի սկզբում։}
Միակապ ցուցակի սկզբից տարրի ավելացնելը պարզագույն գործողություն 
է (\(O(1)\) բարդությամբ)։ Պետք է ստեղծել նոր հանգույց, այն կապել 
ցուցակի սկիզբը ցույց տվող \texttt{head} հղմանը, ապա այդ նոր 
ստեղծված հանգույցը դարձնել ցուցակի սկիզբ։
<<Տարր ավելացնել սկզբից>>=
public void addFront(E e)
{
  Node no = new Node(e);
  no.next = head;
  head = no;
}
@ 

%
%
\paragraph{Ցուցակի առաջին տարրի հեռացնելը։}
Առաջին տարրը հեռացնելու համար պետք է \texttt{head}֊ը տեղափոխել
իրեն հաջորդող հանգույցին, ապա վերադարձնել առաջին հանգույցի 
\texttt{data} դաշտի արժեքը։
<<Հեռացնել առաջին տարրը>>=
public E removeFront()
{
    if( empty() )
        return null;

    Node no = head;
    head = no.next;
    return no.data;
}
@


%
%
\paragraph{Աբստրակտ մեթոդների հայտարարություններ։}
Միակապ ցուցակի այն գործողությունները, որոնց իրականացումը տարբերվում 
են ռեկուրսիվ և իտերատիվ իրականացումներում, ես հայտարարել եմ որպես
\texttt{SinglyLinked} դասի աբստրակտ մեթոդներ։ Ահա դրանց թվարկումը․
<<Աբստրակտ մեթոդներ>>=
// Հաշվել տարրերի քանակը
public abstract int count();
// Տարր ավելացնել վերջում
public abstract void addBack(E e);
// Հեռացնել վերջին տարրը
public abstract E removeBack();
// Որոնել տրված տարրը
public abstract boolean contains(E e);
// Հեռացնել տրված արժեքով տարրերը
public abstract void removeAll(E e);
// Շրջել ցուցակը
public abstract void reverse();
// Անցնել բոլոր տարրերով
public abstract void forAll(Consumer<E> f);
@


%
%
\subsection{\texttt{SinglyLinkedRecursive} դասը}

Միակապ ցուցակի ռեկուրսիվ իրականացման \texttt{singlyLinkedRecursive} 
դասը \texttt{SinglyLinked} աբստրակտ դասի կոնկրետացումն (ընդլայնումն)
է։ 
<<SinglyLinkedRecursive դասը>>=
package structures;
import java.util.function.Consumer;
public class SinglyLinkedRecursive<E> extends SinglyLinked<E> {
  <<Հաշվել տարրերի քանակը (ռեկ․)>>
  <<Տարր ավելացնել վերջում (ռեկ․)>>
  <<Որոնել տրված տարրը (ռեկ․)>>
  <<Հեռացնել վերջին տարրը (ռեկ․)>>
  <<Հեռացնել տրված արժեքով տարրերը (ռեկ․)>>
  <<Շրջել ցուցակը (ռեկ․)>>
  <<Անցնել բոլոր տարրերով (ռեկ․)>>
}
@ 
Ռեկուրսիվ տարբերակում բուն ռեկուրսիան իրականացված է օժանդակ  
\texttt{private} մեթոդի օգնությամբ, որը, բացի տվյալ գործողության 
համար պահանջվող պարամետրից, ունի ևս մեկ լրացուցիչ պարամետր՝ 
\texttt{Node} տիպի։ Այս լրացուցիչ պարամետրով տրվում է ցուցակի 
այն հանգույցը, որից սկսած պետք է կատարել գործողությունը։ 


%
%
\paragraph{Հաշվել տարրերի քանակը։}
Միակապ ցուցակում տարրերի (հանգույցների) քանակը հաշվելու համար 
նախատեսված է \texttt{count(Node n)} օժանդակ մեթոդը։ Եթե 
\(n\equiv\boxslash\), այսինքն՝ ցուցակը դատարկ է, ապա վերադարձվում 
է \(0\), հակառակ դեպքում վերադարձվում է ցուցակի պոչի 
երկարությունը՝ գումարած \(1\)։
<<Հաշվել տարրերի քանակը (ռեկ․)>>=
private int count(Node n)
{
  if( n == null )
    return 0;

  return 1 + count(n.next);
}
@
Այս օժանդակ մեթոդն արդեն օգտագործվում է \texttt{length()} 
ինտերֆեյսային մեթոդում․
<<Հաշվել տարրերի քանակը (ռեկ․)>>=
@Override
public int count()
{
  return count(head);
}
@


%
%
\paragraph{Տարր ավելացնել ցուցակի վերջում։}
Միակապ ցուցակի վերջում տրված տարրն ավելացնելու ռեկուրսիվ մոտեցումը
նորից շատ պարզ է։ Եթե ցուցակը դատարկ է, ապա պետք է վերադարձնել 
տրված տարրը պարունակող նոր ստեղծված հանգույցը։ Հակառակ դեպքում,
պետք է տարրն ավելացնել ցուցակի պոչի վերջից, ապա այդ ձևափոխված 
պոչը կապել առաջին հանգույցի \texttt{next} ցուցիչին։ 
\texttt{Node addBack(E e, Node n)} օժանդակ մեթոդը կատարում է 
հենց նշված քայլերը։
<<Տարր ավելացնել վերջում (ռեկ․)>>=
private Node addBack(E e, Node n)
{
  if( n == null )
    return new Node(e);

  n.next = addBack(e, n.next);
  return n;
}
@Override
public void addBack(E e)
{
  head = addBack(e, head);
}
@


%
%
\paragraph{Որոնել տրված տարրը։}
Տրված արժեքով տարրը միակապ ցուցակում որոնվում է երեք քայլով․ 
ա) եթե ցուցակը դատարկ է, ապա վերադարձվում է \texttt{false},
բ) եթե ցուցակի առաջին հանգույցի \texttt{data} դաշտի արժեքը 
հավասար է որոնվող տարրին, ապա վերադարձնել \texttt{true}, և
գ) վերադարձնել ցուցակի պոչում տարրը որոնելու արդյունքը։
<<Որոնել տրված տարրը (ռեկ․)>>=
private boolean contains(E e, Node n)
{
  if( n == null )
    return false;

  if( n.data.equals(e) )
    return true;

  return contains(e, head.next);
}
@Override
public boolean contains(E e)
{
    return contains(e, head);
}
@


%
%
\paragraph{Ցուցակի վերջին տարրի հեռացնելը։}
Եթե ցուցակը դատարկ է, ապա հեռացնելու բան չկա։ Եթե ցուցակում 
միայն մեկ հանգույց է, այսինքն՝ \(n.next\equiv\boxslash\), ապա 
պետք է վերադարձնել դատարկ ցուցակ՝ \(\boxslash\)։ Մյուս դեպքերում, 
ցուցակի առաջին հանգույցի \texttt{next} ցուցիչին պետք է կապել 
ցուցակի պոչը, որից հեռացված է վերջին հանգույցը։
<<Հեռացնել վերջին տարրը (ռեկ․)>>=
private Node removeBack(Node n, Node r)
{
  if( n == null )
    return null;

  if( n.next == null ) {
    r.data = n.data;
    return null;
  }

  n.next = removeBack(n.next, r);
  return n;
}
@Override
public E removeBack()
{
  Node r = new Node(null);
  head = removeBack(head, r);
  return r.data;
}
@


%
%
\paragraph{Հեռացնել տրված արժեքով բոլոր տարրերը։}
Եթե ցուցակը դատարկ է, ապա ոչինչ անել պետք չէ, վերադարձնել 
\(\boxslash\)։ Եթե ցուցակի առաջին հանգույցի \texttt{data}֊ն
հավասար է հեռացվող արժեքին, ապա հեռացնելու գործողությունը
կիրառել ցուցակի պոչի նկատմամբ և վերադարձնել ստացված արդյունքը։
Հակառակ դեպքում առաջին հանգույցի \texttt{next}֊ին կապել 
այն ցուցակը, որը ստացվել է նախանական ցուցակի պոչից տրված 
տարրը հեռացնելու արդյունքում։
<<Հեռացնել տրված արժեքով տարրերը (ռեկ․)>>=
private Node removeAll(E e, Node n)
{
  if( n == null )
    return null;

  if( n.data.equals(e) )
    return removeAll(e, n.next);

  n.next = removeAll(e, n.next);
  return n;
}
@Override
public void removeAll(E e)
{
  head = removeAll(e, head);
}
@


%
%
\paragraph{Ցուցակի շրջելը։}
Ռեկուրսիվ եղանակով միակապ ցուցակը շրջելու ալգորիթմը զարմացնում 
է իր պարզությամբ (ի տարբերություն իտերատիվ ալգորիթմի)։ 
\texttt{reverse(Node n, Node r)} օժանդակ մեթոդի առաջին 
պարամետրը հղում է ցուցակի դեռ չշրջված մասին, իսկ երկրորդը՝
արդեն շրջվածին։ Ռեկուրսիայի ամեն քայլում չշրջված ցուցակից
անջատվում է առաջին հանգույցը և այն միացվում է արդեն շրջված
ցուցակի սկզբից։ Այն դեպքում, երբ առաջին պարամետրը \(\boxslash\)
է, այսինքն՝ դատարկ է, որպես արդյունք պետք է վերադարձնել 
երկրորդ պարամետրը՝ արդեն շրջված ցուցակը։   
<<Շրջել ցուցակը (ռեկ․)>>=
public Node reverse(Node n, Node r)
{
  if( n == null )
    return r;

  Node h = n; 
  n = n.next; 
  h.next = r;
  return reverse(n, h);
}
@
@ Երբ ամբողջ ցուցակը շրջելու համար \texttt{reverse(Node n, Node r)} 
օժանդակ մեթոդը կանչվում է \texttt{reverse()} ինտերֆեյսային մեթոդում,
ապա առաջին արգումենտում պետք է տալ \texttt{head}֊ը, իսկ երկրորդում՝
\texttt{null}։
<<Շրջել ցուցակը (ռեկ․)>>=
@Override
public void reverse()
{
  head = reverse(head, null);
}
@



%
%
\paragraph{Անցում բոլոր հանգույցներով։}
Կապակցված ցուցակը տվյալների կոնտեյներ է։ Բացի տարրեր 
ավելացնելն ու հեռացնելը, առավել հաճախ անհրաժեշտ է լինում 
ինչ֊որ գործողություն կատարել ցուցակի տարրերի հետ։ Օրինակ, 
արտածել տարրերի արժեքները պարունակությունը մի որևէ հոսքի
վրա։ Դրա համար պետք է անցնել ցուցակի բոլոր հանգույցներով
և տրված գործողությունը կիրառել \texttt{data}֊ի արժեքի
նկատմամբ։

Անցման ռեկուրսիվ ալգորիթմը այսպիսինն է․ եթե ցուցակը դատարկ 
չէ, ապա \texttt{f} գործողությունը կիրառել նրա առաջին հանգույցի 
\texttt{data}֊ի նկատմամբ, և կատարել ռեկուրսիվ քայլ՝ ցուցակի
պոչի նկատմամբ։
<<Անցնել բոլոր տարրերով (ռեկ․)>>=
private void forAll(Consumer<E> f, Node n)
{
  if( n != null ) {
    f.accept(n.data);
    forAll(f, n.next);
  }
}
@Override
public void forAll(Consumer<E> f)
{
  forAll(f, head);
}
@


%
%
%
\subsection{\texttt{SinglyLinkedIterative} դասը}

Միակապ ցուցակների հետ կատարվող գործողությունների իտերատիվ 
իրականացման համար \texttt{SinglyLinked} դասն ընդլայնել եմ 
\texttt{SinglyLinkedIterative} դասով։ Այս դասը, բնականաբար,
պարունակում է \texttt{SinglyLinked} դասի բոլոր աբստրակտ 
մեթոդների իրականացումները, բայց այս անգամ արդեն առանց 
օժանդակ մեթոդների օգնության։ Հետագա շարադրանքում պարզ 
կդառնա, որ դրանց կարիքը պարզապես չկա։ Ահա դասի սահմանման
սխեման․ 
<<SinglyLinkedIterative դասը>>=
package structures;
import java.util.function.Consumer;
public class SinglyLinkedIterative<E> extends SinglyLinked<E> {
  <<Հաշվել տարրերի քանակը (իտ․)>>
  <<Տարր ավելացնել վերջում (իտ․)>>
  <<Որոնել տրված տարրը (իտ․)>>
  <<Հեռացնել վերջին տարրը (իտ․)>>
  <<Հեռացնել տրված արժեքով տարրերը (իտ․)>>
  <<Շրջել ցուցակը (իտ․)>>
  <<Անցնել բոլոր տարրերով (իտ․)>>
}
@ 
Գործողությունների ռեկուրսիվ իրականացման դեպքում կար մի 
ընդհանուր սխեմա․ նախ՝ ստուգել բազային դեպքը, դա սովորաբար
ցուցակի դատարկ լինելու կամ մեկ տարր պարունակելու դեպքն է, 
ապա ռեկուրսիվ քայլ կատարել ցուցակի պոչի նկատմամբ։ 
Իտերատիվ իրականացման դեպքում էլ կա այդպիսի սխեմա․ դա 
մի նախապայմանով ցիկլ է (\texttt{while}), որը անցնում է
ցուցակի բոլոր տարրերով։ Ստորև բերված բոլոր մեթոդներում
այդ սխեման է։

%
%
\paragraph{Հաշվել տարրերի քանակը։}
Պարզագույն գործողություն է։ Նախ պետք է \texttt{p}֊ին տալ 
\texttt{head} սկզբնական արժեքը, ապա՝ քանի դեռ \texttt{p}֊ն
\texttt{null} չի դարձել, \texttt{res} հաշվիչը ավելացնել մեկով
և \texttt{p}֊ն տեղափոխել հաջորդ հանգույցին։ 
<<Հաշվել տարրերի քանակը (իտ․)>>=
@Override
public int count()
{
  int res = 0;
  Node p = head;
  while( p != null ) {
    ++res;
    p = p.next;
  }
  return res;
}
@


%
%
\paragraph{Տարր ավելացնել ցուցակի վերջում։}
Եթե ցուցակը դատարկ է, ապա նոր ստեղծված հանգույցը կապվում է 
\texttt{head}֊ին և դառնում է ցուցակի առաջին և միակ հանգույցը։
Իսկ եթե ցուցակը դատարկ չէ, ապա մի որևէ \texttt{p} ցուցիչը
ցիկլով տեղաշարժվում է մինչև ցուցակի վերջը, և նոր ստեղծված
հանգույցը կապվում է վերջին հանգույցի \texttt{next}֊ին։
<<Տարր ավելացնել վերջում (իտ․)>>=
@Override
public void addBack(E e)
{
  Node no = new Node(e);
  if( head == null )
    head = no;
  else {
    Node p = head;
    while( p.next != null )
      p = p.next;
    p.next = no;
  }
}
@

%
%
\paragraph{Որոնել տրված տարրը։}
Նորից պետք է անցնել ցուցակի հանգույցներով և հերթական հանգույցի 
\texttt{data}֊ն համեմատել տրված արժեքի հետ։ Եթե հավասար են, ապա 
վերադարձնել \texttt{true}։ Եթե հանգույցներով անցման ցիկլն 
ավարտվել է, ուրեմն տրված արժեքը ցուցակում չի հանդիպել և պետք 
է վերադարձնել \texttt{false}։
<<Որոնել տրված տարրը (իտ․)>>=
@Override
public boolean contains(E e)
{
  Node p = head;
  while( p != null ) {
    if( p.data.equals(e) )
      return true;
    p = p.next;
  }
  return false;
}
@

%
%
\paragraph{Ցուցակի վերջին տարրի հեռացնելը։}
Ցուցակի վերջին հանգույցը հեռացնելու համար ես դիտարկում եմ 
երեք դեպք․ ա) ցուցակը դատարկ է, բ) ցուցակում միայն մեկ 
հանգույց է, գ) ցուցակում մեկից ավելի հանգույցներ են։
<<Հեռացնել վերջին տարրը (իտ․)>>=
@Override
public E removeBack()
{
  <<Երբ ցուցակը դատարկ է>>
  <<Երբ հանգույցը միակն է>>
  <<Երբ հանգույցները մեկից ավել են>>
}
@
Երբ ցուցակը դատարկ է, ապա հեռացնելու բան չկա և վերադարձվող 
արժեքն էլ \texttt{null}֊ն է։
<<Երբ ցուցակը դատարկ է>>=
if( head == null )
  return null;
@ 
Երբ ցուցակում միայն մեկ հանգույց է, ապա դա կապված է \texttt{head}֊ի 
հետ։ Ուրեմն, պետք է վերադարձնել այդ միակ հանգույցի \texttt{data}֊ն 
և \texttt{head}֊ին էլ վերագրել \texttt{null}՝ ցուցակը դարձնել դատարկ։
<<Երբ հանգույցը միակն է>>=
if( head.next == null ) {
  E res = head.data;
  head = null;
  return res;
}
@
Վերջապես, երբ ցուցակի հանգույցների քանակը մեկից ավել է, ապա պետք 
է մի օժանդակ ցուցիչի օգնությամբ հասնել նախավերջին հանգույցին, 
վերադարձնել դրան հաջորդող հանգույցի \texttt{data}֊ն, իսկ 
նախավերջին հանգույցի \texttt{next}֊ին վերագրել \texttt{null}։
<<Երբ հանգույցները մեկից ավել են>>=
Node p = head;
while( p.next != null )
  p = p.next;
E res = p.data;
p.next = null;
return res;
@

%
%
\paragraph{Հեռացնել բոլոր տրված արժեքներով տարրերը։}
Ակնհայտ է, որ միակապ ցուցակից հեշտ է հեռացնել մի որևէ \texttt{p}
ցուցիչին կապված հանգույցին հաջորդող հանգույցը։ Դրա համար պետք է
պարզապես կատարել \texttt{p.next = p.next.next} վերագրումը։
(Մի որևէ հանգույց հեռացնելու համար [Վիրտ] գրքում առաջարկվում է
հեռացնել դրան հաջորդող հանգույցը, ապա հեռացվածի տվյալներն 
արտագրել ընթացիկի մեջ՝ դրանով ստեղծելով ընթացիկ հանգույցը 
հեռացնելու էֆեկտ։)

% TODO հետագայում խմբագրել և ուղղել
%\begin{figure}[h]
\medskip
{\centering{\includegraphics{struc-fig-8.eps}}\par}
\medskip
%\end{figure}

Որպեսզի միակապ ցուցակից տրված արժեքով բոլոր տարրերը հեռացնելու 
ալգորիթմը հնարավորինս պարզ լինի, ես օգտագործել եմ մի փոքրիկ 
հնարք։ Այն է՝ ցուցակի սկզբից ավելացնում եմ մի ձևական հանգույց։
<<Հեռացնել տրված արժեքով տարրերը (իտ․)>>=
@Override
public void removeAll(E e)
{
  Node pre = new Node(null);
  pre.next = head;
  Node p = pre;
  while( p.next != null ) {
    if( e.equals(p.next.data) )
      p.next = p.next.next;
    else
      p = p.next;
  }
  head = pre.next;
}
@

%
%
\paragraph{Շրջել ցուցակը։}
Միակապ ցուցակը իտերատիվ եղանակով (և մեկ անցումով) շրջելու համար 
օգտագործում եմ երկու ցուցիչներ՝ \texttt{p} և \texttt{q}, որոնցից
առաջինը կապված է ցուցակի դեռ չշրջված մասին, իսկ երկրորդը՝ արդեն 
շրջվածին (ամենասկզբում՝ \(p\equiv head\) և \(q\equiv\boxslash\)): 
Քանի դեռ \texttt{p}֊ն չի հասել ցուցակի վերջին, կատարվում են 
հետևյալ քայլերը․ \textbf{i}) \texttt{r} ժամանակավոր ցուցիչը կապվում 
է \texttt{p}֊ին հոջորդող հանգույցին, \textbf{ii}) \texttt{p}֊ի 
\texttt{next}֊ին կապվում է \texttt{q}֊ն՝ դառնալով \texttt{p}֊ի 
հաջորդող հանգույց, \textbf{iii}) \texttt{q} ցուցիչը կապվում է
\texttt{p}֊ին կապված հանգույցին՝ դառնալով ցուցակի շրջված մասի 
սկզբի ցուցիչ, և \textbf{iv}) \texttt{p}֊ն տեղափոխվում է \texttt{r}֊ի
ցույց տված հանգույցի վրա՝ նորից ցույց տալով ցուցակի չշրջված մասի 
սկիզբը։
<<Շրջել ցուցակը (իտ․)>>=
@Override
public void reverse()
{
  Node p = head, q = null;
  while( p != null ) {
    Node r = p.next;
    p.next = q;
    q = p;
    p = r;
  }
  head = q;
}
@

%
%
\paragraph{Անցում բոլոր հանգույցներով։}
Ցուցակի բոլոր հանգույցներով անցնելը և դրանց \texttt{data}
դաշտի հետ տրված \texttt{f} գործողությունը կատարելու համար 
պետք է գրել մի պարզագույն ցիկլ։
<<Անցնել բոլոր տարրերով (իտ․)>>=
@Override
public void forAll(Consumer<E> f)
{
  Node p = head;
  while( p != null ) {
    f.accept(p.data);
    p = p.next;
  }
}
@




%
%
\subsection{Միակապ ցուցակի կիրառություններ}

%
\paragraph{Ստեկ։} Միակապ ցուցակի կիրառության թերևս ամենավառ օրինակը 
\emph{պահունակը} կամ \emph{ստեկն} (\emph{stack}) է։ Դա մի օբյեկտ է, 
որում տվյալներ կարելի է ավելացնել և հեռացնել միայն մեկ կողմից՝ սկզբից 
(կամ վերևից, ինչպես ավտոմատ հրացանի պահունակում)։ Ընդունված է ասել, 
որ ստեկը LIFO (last-in, first-out) տիպի ցուցակ է։ 


%
\paragraph{Տեքստ։} Դիցուք տրված է մի տեքստային ֆայլ և պահանջվում է
դրա պարունակությունը ֆորմատավորել տրված լայնությամբ և բարձրությամբ
սյունակներով։ Այս առաջադրանքն իրագործելու նամար հարմար է նախնական 
տեքստը ներկայացնել որպես տողերի միակապ ցուցակ, իսկ տողերն էլ իրենց 
հերթին՝ որպես բառերի միակապ ցուցակ։ Սա հնարավորություն է տալիս,
օրինակ, բավականին արդյունավետ գործողություններով մի տողը տրոհել մի 
քանի նոր տեղերի, բառերի արանքներում ավելացնել անհրաժեշտ քանակությամբ 
բացատներ և այլն։ 

Ընթերոցողին առաջարկում եմ գրել ծրագիր, որը ինչ֊որ պարամետրերով 
ստանում է տեքստը պարունակող ֆայլը, ֆորմատավորման բնութագրիչները 
(օրինակ, զուգահեռ սյունակների քանակ, դրանցից յուրաքանչյուրի 
լայնությունն ու բարձրությունը, և այլն), ապա ստեղծում է նախնական
տեքստի ֆորմատավորված տարբերակը։ Նշեմ նորից, որ որպես հիմնական
տվյալների կառուցվածք, պետք է օգտագործել միակապ ցուցակը։ Այդ 
նպատակի համար կարելի է օգտագործել կամ այս գլխում բերված 
իրականացումները՝ անհրաժեշտության դեպքում փոփոխություններ կատարելով
դրանց մեջ, կամ ստեղծել միակապ ցուցակի՝ տվյալ առաջադրանքին ավելի 
համապատասխան տարբերակ։



